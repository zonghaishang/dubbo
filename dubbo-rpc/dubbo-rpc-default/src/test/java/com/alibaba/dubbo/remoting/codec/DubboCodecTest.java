package com.alibaba.dubbo.remoting.codec;

import com.alibaba.dubbo.remoting.exchange.Request;
import com.alibaba.dubbo.rpc.protocol.dubbo.DubboCodec;

import junit.framework.Assert;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;

/**
 * @author yiji@apache.org
 */
public class DubboCodecTest extends ExchangeCodecTest {

    @Before
    public void setUp() throws Exception {
        codec = new DubboCodec();
    }

    @Test
    public void test_Decode_Return_Request_Object2() throws IOException {
        byte[] request = new byte[]{
                (byte)0xda, (byte)0xbb, (byte)0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte)0xbb, (byte)0xe0, 0x6b,
                0x00, 0x00, 0x01, (byte)0xe4, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x6a, 0x61, 0x72, 0x30, 0x33, 0x63,
                0x6f, 0x6d, 0x2e, 0x77, 0x69, 0x6e, 0x78, 0x75, 0x61, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
                0x63, 0x65, 0x73, 0x2e, 0x70, 0x71, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
                0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
                0x63, 0x65, 0x05, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x0f, 0x66, 0x69, 0x6e, 0x64, 0x42, 0x43, 0x6f,
                0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1f, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c,
                0x61, 0x6e, 0x67, 0x2f, 0x4c, 0x6f, 0x6e, 0x67, 0x3b, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x75,
                0x74, 0x69, 0x6c, 0x2f, 0x53, 0x65, 0x74, 0x3b, 0x59, 0x47, (byte)0x93, (byte)0x80, (byte)0xa9, 0x72, 0x11, 0x6a,
                0x61, 0x76, 0x61, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x74,
                0x43, 0x30, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x69, 0x6e, 0x78, 0x75, 0x61, 0x6e, 0x2e, 0x70,
                0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
                0x75, 0x6d, 0x73, 0x2e, 0x42, 0x43, 0x6f, 0x64, 0x65, (byte)0x91, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x60,
                0x1a, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x5f,
                0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x60, 0x07, 0x42, 0x5f, 0x53,
                0x54, 0x4f, 0x43, 0x4b, 0x48, 0x04, 0x70, 0x61, 0x74, 0x68, 0x30, 0x33, 0x63, 0x6f, 0x6d, 0x2e,
                0x77, 0x69, 0x6e, 0x78, 0x75, 0x61, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
                0x2e, 0x70, 0x71, 0x73, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
                0x64, 0x75, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0b,
                0x58, 0x2d, 0x42, 0x33, 0x2d, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x10, 0x31, 0x37, 0x65, 0x63,
                0x31, 0x62, 0x38, 0x61, 0x34, 0x37, 0x31, 0x62, 0x34, 0x34, 0x35, 0x63, 0x11, 0x58, 0x2d, 0x42,
                0x33, 0x2d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x10, 0x63,
                0x33, 0x35, 0x39, 0x63, 0x62, 0x65, 0x39, 0x64, 0x63, 0x61, 0x31, 0x39, 0x63, 0x35, 0x63, 0x0c,
                0x58, 0x2d, 0x42, 0x33, 0x2d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x01, 0x30, 0x0c, 0x58,
                0x2d, 0x42, 0x33, 0x2d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x10, 0x61, 0x61, 0x39, 0x35,
                0x61, 0x34, 0x64, 0x35, 0x35, 0x35, 0x39, 0x38, 0x62, 0x35, 0x66, 0x30, 0x09, 0x69, 0x6e, 0x74,
                0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x30, 0x33, 0x63, 0x6f, 0x6d, 0x2e, 0x77, 0x69, 0x6e, 0x78,
                0x75, 0x61, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x71, 0x73,
                0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
                0x4d, 0x65, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x07, 0x76, 0x65, 0x72, 0x73,
                0x69, 0x6f, 0x6e, 0x05, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
                0x74, 0x05, 0x36, 0x30, 0x30, 0x30, 0x30, 0x5a

        };

        Request obj = (Request) decode(request);

        Assert.assertEquals(true, obj.isTwoWay());
        Assert.assertEquals(false, obj.isHeartbeat());
        Assert.assertEquals("2.0.0", obj.getVersion());
        System.out.println(obj);
    }

}
